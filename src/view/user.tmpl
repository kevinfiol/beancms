{% function block.head() %}
  {% if theme and theme ~= '' then %}
    <link rel="stylesheet" type="text/css" href="/static/theme/{%& themes[theme] %}.css">
  {% else %}
    <link rel="stylesheet" type="text/css" href="/static/default.css">
  {% end %}

  {% if custom_css and custom_css ~= '' then %}
    <style>
      {%& custom_css %}
    </style>
  {% end %}
{% end %}

{% function block.content() %}
  {% if has_user_access then %}
    <nav class="user-nav">
      <a href="/{%& username %}/{%& new_post_id %}">
        Write
      </a>

      <a href="/a/logout">
        Logout
      </a>

      <button id="view-drafts">
        Drafts
      </button>
    </nav>

    <dialog id="drafts" class="drafts">
      <div class="controls">
        <button class="close" autofocus>Close</button>
      </div>
      <ul class="list">
      </ul>
    </dialog>
  {% end %}

  <main class="user-page">
    <h1 class="user-heading">{%& custom_title ~= '' and custom_title or username %}</h1>
    <section class="intro">{%= intro %}</section>

    {% if #posts > 0 then %}
      <h2 class="posts-heading">Posts</h2>
      <section class="posts-container">
        <div class="posts" role="list">
          {% for _, post in pairs(posts) do %}
            <div class="post" role="listitem">
              <div class="title">
                <a href="/{%& username %}/{%& post.slug or post.post_id %}">
                  {%& post.title or post.slug or post.post_id %}
                </a>
              </div>
              <div class="created-time">
                <span>{%& post.created_time %}</span>
              </div>
            </div>
          {% end %}
        </div>
      </section>
    {% else %}
      <em>User has no posts</em>
    {% end %}

    <details class="options">
      <summary>Options</summary>
      <form action="/a/update/{%& username %}" method="POST">
        <label>
          <strong>Enable Table of Contents</strong>
          <input type="checkbox" name="enable_toc" {%& enable_toc == 1 and 'checked' or '' %} />
        </label>

        <label>
          Theme
          <select name="theme">
            <option
              value=""
              {%& theme == '' and 'selected' or '' %}
            >
              Default
            </option>

            {% for key, css_theme in pairs(themes) do %}
              <option
                value="{%& key %}"
                {%& theme == key and 'selected' or '' %}
              >
                {%& css_theme %}
              </option>
            {% end %}
          </select>
        </label>

        <label>
          <strong>Custom Title</strong>
          <input type="text" name="custom_title" maxlength="50" value="{%& custom_title or '' %}" />
        </label>

        <label>
          <strong>Custom Intro Markdown</strong>
          <textarea name="intro" maxlength="500" rows="4" cols="33">{%& intro_raw or '' %}</textarea>
        </label>

        <label>
          <strong>Custom CSS</strong>
          <textarea name="custom_css" maxlength="80000" rows="8" cols="33">{%& custom_css or '' %}</textarea>
        </label>

        <label>
          <strong>Number of newest posts to display</strong>
          <input type="number" name="max_display_posts" min="1" max="100" value="{%& max_display_posts or 50 %}" />
        </label>

        <div>
          <button type="submit">Save</button>
        </div>
      </form>
    </details>
  </main>

  <script type="module">
    import { entries, del } from '/static/idb-keyval.js';

    const USERNAME = '{%& username %}';

    const ViewDraftsBtn = document.getElementById('view-drafts');
    const DraftsDialog = document.getElementById('drafts');
    const DialogList = DraftsDialog.querySelector('.list');
    const CloseDialogBtn = DraftsDialog.querySelector('button.close');

    if (ViewDraftsBtn) {
      let listInitialized = false;

      function showEmptyDialog() {
        DraftsDialog.removeChild(DialogList);
        const note = document.createElement('p');
        note.innerText = 'No saved drafts';
        DraftsDialog.appendChild(note);
      }

      ViewDraftsBtn.addEventListener('click', () => {
        entries().then((drafts) => {
          if (!listInitialized) {
            drafts = drafts.filter(([key, value]) => value.username === USERNAME);

            if (drafts.length) {
              populateList(drafts);
            } else {
              showEmptyDialog();
            }

            listInitialized = true;
          }

          DraftsDialog.showModal();
        });
      });

      CloseDialogBtn.addEventListener('click', () => {
        DraftsDialog.close();
      });

      function populateList(drafts) {
        for (const [slug] of drafts) {
          // list item
          const li = document.createElement('li');

          // link to edit page
          const a = document.createElement('a');
          a.href = `/${USERNAME}/${slug}/edit`;
          a.innerText = slug;

          // delete button
          const button = document.createElement('button');
          button.innerText = 'âœ•';
          button.setAttribute('aria-label', 'Delete Draft');
          button.setAttribute('title', 'Delete Draft');
          button.onclick = () => {
            del(slug).then(() => {
              DialogList.removeChild(li);

              if (DialogList.children.length === 0) {
                showEmptyDialog();
              }
            });
          };

          // append elements to DOM
          li.appendChild(a);
          li.appendChild(button);
          DialogList.appendChild(li);
        }
      }
    }
  </script>
{% end %}

{% render('layout', { title = username }) %}
