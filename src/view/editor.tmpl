<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" type="text/css" href="/static/main.css">
  <title>{%& title or slug or post_id %}</title>
</head>
<body>
  <figure id="toast" role="alert" style="display:none">
  </figure>

  <main>
    <textarea 
      id="editor"
      placeholder="Click here to start writing..."
      rows="10"
      maxlength="10000"
    >{%& content %}</textarea>
  </main>

  <script>
    const USERNAME = '{%& username %}';
    const POST_ID = '{%& post_id %}';
    const SLUG = '{%& slug or post_id or '' %}';
    const TITLE = '{%& title or slug or post_id or '' %}';

    const Editor = document.getElementById('editor');
    const Alert = document.getElementById('toast');

    const State = {
      slug: SLUG,
      title: TITLE,
      saveController: undefined,
      saving: false
    };

    // initial autoexpand
    if (Editor.style.height !== Editor.scrollHeight + 'px') {
      Editor.style.height = 'inherit';
      Editor.style.height = Editor.scrollHeight + 'px';
    }

    async function wait(ms) {
      await new Promise((resolve) =>
        setTimeout(resolve, ms)
      );
    }

    function debounce(callback, wait = 500) {
      let timer;

      return (...args) => {
        clearTimeout(timer);
        timer = setTimeout(() => callback(...args), wait);
      };
    }

    function modifyUrl(slug) {
      const newUrl = `/${USERNAME}/${slug}/edit`;
      history.replaceState(null, '', newUrl);
    }

    function createSlug(text = '') {
      const lines = text.split('\n');

      for (let i = 0; i < lines.length; i++) {
        const slug = lines[i].toString().toLowerCase()
          .replace(/\s+/g, '-') // Replace spaces with -
          .replace(/[^\w\-]+/g, '') // Remove all non-word chars
          .replace(/\-\-+/g, '-') // Replace multiple - with single -
          .replace(/^-+/, '') // Trim - from start of text
          .replace(/-+$/, ''); // Trim - from end of text

        if (slug.length > 0) return slug;
      }

      return '';
    }

    function showAlert(text = 'Saving...') {
      if (showAlert.timer) clearTimeout(showAlert.timer);
      Alert.style.display = 'inherit';
      Alert.innerText = text;

      showAlert.timer = setTimeout(() => {
        Alert.style.display = 'none';
        Alert.innerText = '';
      }, 3000);
    }

    const setTitle = debounce(async (content) => {
      const trimmed = content.trim();
      const firstLine = trimmed.split('\n')[0];
      const title = firstLine.slice(0, 50).trim().replace(/#/g, ''); // remove MD #s
      const slug = (createSlug(title) || POST_ID);

      State.title = title;
      State.slug = slug;

      document.title = title;
      modifyUrl(slug);
    });

    const saveChanges = async (content) => {
      const trimmed = content.trim();

      if (State.saveController) {
        State.saveController.abort();
      }

      Editor.setAttribute('disabled', true);
      State.saving = true;
      State.saveController = new AbortController();
      showAlert('Saving...');

      try {
        await fetch(`/${USERNAME}/${POST_ID}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          signal: State.saveController.signal,
          body: JSON.stringify({
            content: trimmed,
            title: State.title,
            slug: State.slug
          })
        });

        showAlert('Saved! Redirecting...');
        await wait(1000);

        // redirect
        window.location.replace(`/${USERNAME}/${State.slug}`);
      } catch (e) {
        if (e.name === 'AbortError') { console.log('aborted old request'); }
        else console.error('save error: ', e);
        showAlert('Could not save! Try again');
      } finally {
        Editor.removeAttribute('disabled');
        State.saving = false;
      }
    };

    // enable tabs in editor
    Editor.addEventListener('keydown', (e) => {
      const editor = e.target;

      if (e.keyCode === 9 || e.which === 9 || e.key === 'Tab') {
        e.preventDefault();
        const originalStart = editor.selectionStart;

        editor.value =
          editor.value.substring(0, editor.selectionStart) +
          '\t' +
          editor.value.substring(editor.selectionEnd);

        editor.selectionEnd = originalStart + 1;
      }

      // save changes
      if (e.ctrlKey && e.key === 's' && !State.saving) {
        e.preventDefault();
        saveChanges(editor.value);
      }
    });

    // auto-expand editor
    Editor.addEventListener('input', (e) => {
      const editor = e.target;
      setTitle(editor.value);
      if (e.inputType === 'insertText') return;

      if (editor.style.height !== editor.scrollHeight + 'px') {
        editor.style.height = 'inherit';
        editor.style.height = editor.scrollHeight + 'px';
      }
    });
  </script>
</body>
</html>