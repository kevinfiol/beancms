{% function block.head() %}
  <link rel="stylesheet" type="text/css" href="/static/theme/default.css">

  <style>
    body {
      width: 100%;
      max-width: 100%;
      margin: 0;
      padding: 0;
      overflow: hidden;
    }

    main {
      height: 100vh;
      width: 100%;
    }
  </style>
{% end %}

{% function block.content() %}
  <div class="editor-btns">
    <button class="view-help">Help</button>
    <button class="save-changes">Save</button>
    <label for="image-upload">Upload Image</label>
    <input id="image-upload" name="image-upload" type="file" accept="image/*" />
  </div>

  <dialog class="help-dialog">
    <div class="controls">
      <button class="close" autofocus>Close</button>
    </div>

    <p>Posts are written in <a href="https://htmlpreview.github.io/?https://github.com/jgm/djot/blob/master/doc/syntax.html">djot</a>, an extension of Markdown.</p>

    <p>To <strong>save changes</strong>, press: <code>Ctrl-S</code></p>
    <p>To <strong>add images</strong>, drag them onto the page, or paste them from your clipboard.</p>
    <p>To <strong>delete a post</strong>, clear the post content, and save your changes.</p>
    <p>Unsaved changes are automatically stored as drafts on your local machine.</p>
    <p>Raw versions of published posts can be viewed at <code>/username/post_id/raw</code></p>
  </dialog>

  <figure id="toast" role="alert" style="display:none">
  </figure>

  <div class="drag-overlay">
    <span>Drop to upload</span>
  </div>

  <main>
    <textarea 
      id="editor"
      placeholder="Click here to start writing..."
      rows="10"
      maxlength="60000"
    >{%& content %}</textarea>
  </main>

  <script type="module" nonce="{%= nonce %}">
    import { get, set, del } from '/static/lib/idb-keyval.js';

    const USERNAME = '{%& username %}';
    const POST_ID = '{%& post_id %}';
    const SLUG = '{%& slug or post_id or '' %}';
    const TITLE = '{%& title or slug or post_id or '' %}';
    const MAX_IMAGE_SIZE = {%& max_image_size %};
    const MAX_IMAGE_SIZE_STR = '{%& max_image_size_str %}';
    const RESERVED_SLUGS = ['feed', 'archive'];
    const IS_MOBILE_DEVICE = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);

    const $ = document.querySelector.bind(document);
    const Editor = $('#editor');
    const Alert = $('#toast');
    const DragOverlay = $('.drag-overlay');
    const HelpBtn = $('.view-help');
    const HelpDialog = $('.help-dialog');
    const HelpDialogCloseBtn = $('.help-dialog button.close');
    const ImageUploadInput = $('#image-upload');
    const SaveChangesBtn = $('.save-changes');

    const State = {
      slug: SLUG,
      title: TITLE,
      saveController: undefined,
      pending: false,
      changes: false
    };

    async function wait(ms) {
      await new Promise((resolve) =>
        setTimeout(resolve, ms)
      );
    }

    function debounce(callback, wait = 350) {
      let timer;

      return (...args) => {
        clearTimeout(timer);
        timer = setTimeout(() => callback(...args), wait);
      };
    }

    function modifyUrl(slug) {
      const newUrl = `/${USERNAME}/${slug}/edit`;
      history.replaceState(null, '', newUrl);
    }

    function createSlug(text = '') {
      const lines = text.split('\n');

      for (let i = 0; i < lines.length; i++) {
        const slug = lines[i].toString().toLowerCase()
          .replace(/\s+/g, '-') // Replace spaces with -
          .replace(/[^\w\-]+/g, '') // Remove all non-word chars
          .replace(/\-\-+/g, '-') // Replace multiple - with single -
          .replace(/^-+/, '') // Trim - from start of text
          .replace(/-+$/, ''); // Trim - from end of text

        if (slug.length > 0) return slug;
      }

      return '';
    }

    function showAlert(text = '') {
      if (showAlert.timer) clearTimeout(showAlert.timer);
      Alert.style.display = 'inherit';
      Alert.innerText = text;

      showAlert.timer = setTimeout(() => {
        Alert.style.display = 'none';
        Alert.innerText = '';
      }, 3000);
    }

    function parseTitle(content) {
      const firstLine = content.split('\n')[0].trim();
      const title = firstLine.slice(0, 50).replace(/#/g, '').trim(); // remove MD #s
      return title;
    }

    function uploadImage(file) {
      return new Promise((resolve, reject) => {
        const xhr = new XMLHttpRequest();
        xhr.open('POST', '/upload', true);

        xhr.upload.addEventListener('progress', (e) => {
          if (!e.lengthComputable) return;
          const percent = (e.loaded / e.total) * 100;
          showAlert(`Uploading image: ${percent}%`)
        });

        xhr.onload = () => {
          if (xhr.status === 200) resolve(xhr.response);
          else reject(Error('Failed to upload image'));
        };

        xhr.onerror = () => reject(Error('Network error occurred while uploading image'));

        const formData = new FormData();
        formData.append('image', file);
        xhr.send(formData);
      });
    }

    function insertTextAtCursor(text) {
      if (!IS_MOBILE_DEVICE && document.execCommand) {
        document.execCommand('insertText', false, text);
        return;
      }

      alert('MOBILE');
      const start = Editor.selectionStart;
      const end = Editor.selectionEnd;

      const currentValue = Editor.value;
      const newValue = currentValue.slice(0, start) + text + currentValue.slice(end);
      Editor.value = newValue;

      // update draft with new dynamically added text
      saveDraft(newValue);
      // flag that changes have been made
      if (!State.changes) State.changes = true;

      // update cursor position
      const newCursorPos = start + text.length;
      Editor.setSelectionRange(newCursorPos, newCursorPos);
      Editor.focus();
    }

    const saveDraft = debounce((content) => {
      if (content) 
        set(State.slug, { username: USERNAME, content })
          .then(() => showAlert('Draft saved'));
      else
        del(State.slug)
          .catch(console.error)
    });

    const setTitle = debounce((content) => {
      State.pending = true;
      const title = parseTitle(content);

      let slug = (createSlug(title) || POST_ID);
      if (RESERVED_SLUGS.includes(slug)) slug = `${slug}-${POST_ID}`

      State.title = title;
      State.slug = slug;

      document.title = title;
      modifyUrl(slug);
      State.pending = false;
    });

    const saveChanges = async (content) => {
      if (State.saveController) {
        State.saveController.abort();
      }

      Editor.setAttribute('disabled', true);
      State.pending = true;
      State.saveController = new AbortController();
      showAlert('Saving...');

      try {
        if (State.changes) {
          await fetch(`/${USERNAME}/${POST_ID}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            signal: State.saveController.signal,
            body: JSON.stringify({
              content,
              title: State.title,
              slug: State.slug
            })
          });
        }

        showAlert('Saved! Redirecting...');

        // delete draft now that it is sync with server
        await del(State.slug).catch(console.error);
        await wait(150);

        // redirect
        if (content) window.location.replace(`/${USERNAME}/${State.slug}`);
        else window.location.replace(`/${USERNAME}`);
      } catch (e) {
        if (e.name === 'AbortError') { console.log('aborted old request'); }
        else console.error('save error: ', e);
        showAlert('Could not save! Try again');
      } finally {
        Editor.removeAttribute('disabled');
        State.pending = false;
      }
    };

    // save hotkey
    document.addEventListener('keydown', (e) => {
      if (e.ctrlKey && e.key === 's') {
        e.preventDefault();
        if (!State.pending)
          saveChanges(Editor.value.trim());
      }
    });

    SaveChangesBtn.addEventListener('click', () => {
      if (!State.pending) saveChanges(Editor.value.trim());
    });

    // drop images
    let isDraggingFile = false;

    document.addEventListener('dragenter', (e) => {
      if (!isDraggingFile && e.dataTransfer && e.dataTransfer.types.includes('Files')) {
        e.preventDefault();
        isDraggingFile = true;
        DragOverlay.classList.add('-active');
      }
    });

    document.addEventListener('dragleave', (e) => {
      if (isDraggingFile && e.relatedTarget === null) {
        e.preventDefault();
        isDraggingFile = false;
        DragOverlay.classList.remove('-active');
      }
    });

    document.addEventListener('dragover', (e) => {
      if (isDraggingFile && e.dataTransfer && e.dataTransfer.types.includes('Files')) {
        e.preventDefault();
      }
    });

    document.addEventListener('drop', (e) => {
      if (isDraggingFile && e.dataTransfer && e.dataTransfer.files.length > 0  && !State.pending) {
        e.preventDefault();
        isDraggingFile = false;
        DragOverlay.classList.remove('-active');
        const [file] = e.dataTransfer.files;

        if (file.type.startsWith('image/')) {
          if (file.size > MAX_IMAGE_SIZE) {
            showAlert(`Image size too large (> ${MAX_IMAGE_SIZE_STR})`);
            return;
          }

          (async () => {
            try {
              const imagePath = '/' + (await uploadImage(file));
              insertTextAtCursor(`![${file.name}](${imagePath})`);
            } catch (e) {
              console.error('Failed to upload image: ', e);
              showAlert('Failed to upload image.')
            }
          })();
        }
      }
    });

    ImageUploadInput.addEventListener('change', (e) => {
      const file = e.target.files[0];

      if (file && file.type.startsWith('image/')) {
        if (file.size > MAX_IMAGE_SIZE) {
          showAlert(`Image size too large (> ${MAX_IMAGE_SIZE_STR})`);
          return;
        }

        (async () => {
          try {
            const imagePath = '/' + (await uploadImage(file));
            insertTextAtCursor(`![${file.name}](${imagePath})`);
          } catch (e) {
            console.error('Failed to upload image: ', e);
            showAlert('Failed to upload image.')
          } finally {
            ImageUploadInput.value = '';
          }
        })();
      }
    });

    // enable tabs in editor
    Editor.addEventListener('keydown', (e) => {
      const editor = e.target;

      if (e.keyCode === 9 || e.which === 9 || e.key === 'Tab') {
        e.preventDefault();
        insertTextAtCursor('\t');
      }
    });

    // auto-expand editor
    Editor.addEventListener('input', (e) => {
      const editor = e.target;

      if (!State.changes) State.changes = true;

      const content = editor.value.trim();
      const currentLine = editor.value
        .substr(0, editor.selectionStart)
        .split('\n')
        .length;

      if (currentLine > 1) saveDraft(content);
      else setTitle(content);
    });

    Editor.addEventListener('paste', async (e) => {
      const data = e.clipboardData;

      if (data && data.items) {
        for (const item of data.items) {
          if (item.type.startsWith('image/') && !State.pending) {
            const file = item.getAsFile();
            if (!file) return;

            if (file.size > MAX_IMAGE_SIZE) {
              showAlert(`Image size too large (> ${MAX_IMAGE_SIZE_STR})`);
              return;
            }

            try {
              const imagePath = '/' + (await uploadImage(file));
              insertTextAtCursor(`![${file.name}](${imagePath})`);
            } catch (e) {
              console.error('Failed to upload image: ', e);
              showAlert('Failed to upload image.')
            }

            e.preventDefault();
            return;
          }
        }
      }
    });

    HelpBtn.addEventListener('click', () => {
      State.pending = true;
      HelpDialog.showModal();
    });

    HelpDialogCloseBtn.addEventListener('click', () => {
      State.pending = false;
      HelpDialog.close();
    });

    // initial check for draft
    get(State.slug).then((value) => {
      if (!value) return;
      const { content } = value;

      if (State.slug === State.title) {
        // unsaved draft; parse title
        State.title = parseTitle(content);
      }

      Editor.textContent = content;
      State.changes = true;
      showAlert('Local draft loaded')
    });
  </script>
{% end %}

{% render('layout', { title = title or slug or post_id }) %}
